<template>
  <div class="workspace-container">
    <Sidebar 
      @toggle-notification="showNotificationPanel = !showNotificationPanel"
      @toggle-user="showUserPanel = !showUserPanel"
    />
    
    <!-- 可视化模板边栏 - 固定在导航栏右边 -->
    <aside class="template-sidebar">
      <div class="template-header">
        <h3>可视化模板</h3>
      </div>
      <div class="template-grid">
        <div 
          v-for="(image, index) in thumbnails" 
          :key="index" 
          class="template-item" 
          :class="{ active: selectedTemplate === index }"
          @click="selectTemplate(index)"
        >
          <img :src="`/assets/index_images/${image}`" :alt="`模板 ${index + 1}`" class="template-image">
          <span class="template-label">{{ labels[index % labels.length] }}</span>
        </div>
      </div>
    </aside>
    
    <!-- 遮罩层 -->
    <div 
      v-if="showNotificationPanel || showUserPanel" 
      class="overlay" 
      @click="closeAllPanels"
    ></div>

    <!-- 通知面板 -->
    <div class="notification-panel" :class="{ active: showNotificationPanel }">
      <div class="notification-header">
        <h3>通知</h3>
        <button class="close-btn" @click="showNotificationPanel = false">&times;</button>
      </div>
      <div class="notification-list">
        <div class="notification-item unread">
          <div class="notification-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M22 11.08V12C22 17.52 17.52 22 12 22C6.48 22 2 17.52 2 12C2 6.48 6.48 2 12 2C14.44 2 16.66 2.89 18.38 4.34" stroke="currentColor" stroke-width="2"/>
              <path d="M22 4L12 14.01L9 11.01" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <div class="notification-content">
            <p>论文分析完成</p>
            <span class="notification-time">5分钟前</span>
          </div>
        </div>
      </div>
    </div>

    <!-- 用户面板 -->
    <div class="user-panel" :class="{ active: showUserPanel }">
      <div class="user-info">
        <img src="/default-avatar.svg" alt="用户头像" class="user-avatar">
        <div class="user-details">
          <h4>访客用户</h4>
          <p>未登录</p>
        </div>
      </div>
      <div class="user-menu">
        <a href="#profile" class="menu-item">个人资料</a>
        <a href="#settings" class="menu-item">设置</a>
        <div class="menu-divider"></div>
        <a href="#login" class="menu-item">登录</a>
      </div>
    </div>

    <!-- 主工作区 -->
    <main class="workspace">
      <!-- 顶部搜索区域 -->
      <div class="workspace-header" v-show="!showPdfPreview">
        <div class="search-wrapper">
          <button class="upload-btn" @click="triggerFileUpload" title="上传PDF">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M12 15V3M12 3L8 7M12 3L16 7" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              <path d="M2 17L2 19C2 20.1046 2.89543 21 4 21L20 21C21.1046 21 22 20.1046 22 19V17" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </button>
          <input 
            type="text" 
            class="search-input" 
            v-model="searchQuery"
            @keypress.enter="handleSearch"
            placeholder="输入pdf链接或者直接搜索论文"
          >
          <button class="search-btn" @click="handleSearch">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z" 
                    stroke="currentColor" 
                    stroke-width="2" 
                    stroke-linecap="round"/>
            </svg>
        </div>
      </div>

      <!-- PDF预览区域 -->
      <div class="pdf-preview-section" v-if="showPdfPreview">
        <!-- 浮动按钮组 -->
        <div class="floating-controls">
          <button class="back-btn" @click="closePdfPreview">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M19 12H5M5 12L12 19M5 12L12 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            返回列表
          </button>
        </div>
        <!-- PDF内容区域 -->
        <div class="preview-content">
          <!-- 圆形进度加载 -->
          <div v-if="isDownloading" class="pdf-loading">
            <div class="circle-wrapper">
              <svg class="progress-ring" width="120" height="120">
                <circle class="progress-ring__background" stroke="#ecf0f1" stroke-width="10" fill="transparent" r="52" cx="60" cy="60" />
                <circle class="progress-ring__progress" :stroke="progressColor" stroke-width="10" fill="transparent" r="52" cx="60" cy="60"
                        :style="{ strokeDasharray: circumference, strokeDashoffset: dashOffset }" stroke-linecap="round" />
              </svg>
              <div class="progress-text">{{ downloadProgress }}%</div>
            </div>
          </div>

          <!-- Vue PDF 预览 -->
          <div v-if="!showVisualization" class="pdf-viewer" style="width:100%; height:100%; overflow: auto;">
            <div v-if="pdfBlobUrl" class="pdf-embed-container">
              <vue-pdf-embed
                :source="pdfBlobUrl"
                class="pdf-document"
              />
            </div>
            <p v-else-if="!isDownloading" style="color:#95a5a6; text-align: center; padding: 20px;">准备预览PDF...</p>
          </div>

          <div v-else class="visualization-result">
            <img :src="visualizationImage" alt="可视化结果" class="visualization-image">
          </div>
        </div>
      </div>

      <!-- 内容展示区域 -->
      <div class="content-section" v-show="!showPdfPreview">
        <!-- 欢迎界面 -->
        <div class="welcome-view" v-if="currentView === 'welcome'">
          <div class="welcome-icon">
            <svg width="80" height="80" viewBox="0 0 24 24" fill="none">
              <path d="M13 2L3 14H12L11 22L21 10H12L13 2Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
            </svg>
          </div>
          <h2>开始你的论文分析之旅</h2>
          <p>上传PDF文件、输入链接或搜索论文关键词</p>
        </div>

        <!-- 搜索结果列表 -->
        <div class="search-results" v-if="currentView === 'search'">
          <h3 class="results-title">搜索结果</h3>
          <div class="results-list">
            <div 
              v-for="result in paginatedResults" 
              :key="result.title" 
              class="result-item"
              @click="selectPaper(result)"
            >
              <h3 class="result-title">{{ result.title }}</h3>
              <p class="result-authors">{{ result.authors }}</p>
              <p class="result-abstract">{{ result.abstract }}</p>
              <div class="result-meta">
                <span>📅 {{ result.year }}</span>
                <span>📊 引用: {{ result.citations }}</span>
              </div>
            </div>
          </div>
          <!-- 分页 -->
          <div class="pagination" v-if="totalPages > 1">
            <span class="pagination-info">显示 {{ startItem }}-{{ endItem }} / 共 {{ allResults.length }} 条</span>
            <button class="pagination-btn" @click="goToPage(1)" :disabled="currentPage === 1">首页</button>
            <button class="pagination-btn" @click="goToPage(currentPage - 1)" :disabled="currentPage === 1">上一页</button>
            <div class="pagination-pages">
              <button 
                v-for="page in pageButtons" 
                :key="page"
                class="pagination-btn" 
                :class="{ active: page === currentPage }"
                @click="goToPage(page)"
              >
                {{ page }}
              </button>
            </div>
            <button class="pagination-btn" @click="goToPage(currentPage + 1)" :disabled="currentPage === totalPages">下一页</button>
            <button class="pagination-btn" @click="goToPage(totalPages)" :disabled="currentPage === totalPages">尾页</button>
          </div>
        </div>
      </div>
    </main>

    <!-- 隐藏的文件上传输入 -->
    <input type="file" ref="fileInput" accept=".pdf" style="display: none;" @change="handleFileUpload">
  </div>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted, nextTick } from 'vue'
import { useRoute } from 'vue-router'
import { apiService } from '@/api'
import { isURL } from '@/utils/helpers'
import Sidebar from '@/components/Sidebar.vue'
import VuePdfEmbed from 'vue-pdf-embed'

const route = useRoute()

const showNotificationPanel = ref(false)
const showUserPanel = ref(false)
const searchQuery = ref('')
const currentView = ref('welcome')
const thumbnails = ref([])
const labels = ['关系网可视化', '词云可视化', '指标对比', '时间线图', '数据分布', '流程图', '矩阵热力图', '雷达图']

// 新增状态
const selectedTemplate = ref(null)
const selectedPaperTitle = ref('')
const showPdfPreview = ref(false)
const showVisualization = ref(false)
const isProcessing = ref(false)
const visualizationImage = ref('')
// PDF 下载与预览
const isDownloading = ref(false)
const downloadProgress = ref(0)
const pdfBlobUrl = ref('')
// 圆形进度参数
const radius = 52
const circumferenceVal = 2 * Math.PI * radius
const circumference = `${circumferenceVal}px`
const progressColor = '#3498db'
const dashOffset = computed(() => {
  const pct = Math.max(0, Math.min(100, downloadProgress.value))
  const val = circumferenceVal - (pct / 100) * circumferenceVal
  return `${val}px`
})

const allResults = ref([])
const currentPage = ref(1)
const itemsPerPage = 10
const fileInput = ref(null)

const totalPages = computed(() => Math.ceil(allResults.value.length / itemsPerPage))
const startItem = computed(() => (currentPage.value - 1) * itemsPerPage + 1)
const endItem = computed(() => Math.min(currentPage.value * itemsPerPage, allResults.value.length))

const paginatedResults = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage
  return allResults.value.slice(start, start + itemsPerPage)
})

const pageButtons = computed(() => {
  const maxButtons = 5
  let start = Math.max(1, currentPage.value - Math.floor(maxButtons / 2))
  let end = Math.min(totalPages.value, start + maxButtons - 1)
  if (end - start < maxButtons - 1) {
    start = Math.max(1, end - maxButtons + 1)
  }
  return Array.from({ length: end - start + 1 }, (_, i) => start + i)
})

const loadThumbnails = async () => {
  try {
    const data = await apiService.getIndexImages()
    if (data.images) {
      thumbnails.value = data.images
    }
  } catch (error) {
    console.error('加载缩略图失败:', error)
  }
}

const handleSearch = async () => {
  const query = searchQuery.value.trim()
  if (!query) return

  currentView.value = 'search'
  try {
    const data = await apiService.searchPapers(query)
    const results = Array.isArray(data?.results) ? data.results : []
    allResults.value = results.map(r => ({
      title: r.title,
      authors: r.authors,
      abstract: r.abstract,
      year: r.year,
      citations: r.citations || 0,
      url: r.url,
      pdf_url: r.pdf_url
    }))
  } catch (error) {
    console.error('搜索失败:', error)
    allResults.value = []
  }
  currentPage.value = 1
}

const generateMockResults = (query) => {
  const mockResults = []
  for (let i = 1; i <= 20; i++) {
    mockResults.push({
      title: `关于"${query}"的研究论文 ${i}`,
      authors: 'Zhang Wei, Li Ming, Wang Fang',
      abstract: '这是一篇关于人工智能和机器学习的研究论文。本文探讨了深度学习在自然语言处理中的应用。',
      year: 2020 + (i % 5),
      citations: Math.floor(Math.random() * 100)
    })
  }
  return mockResults
}

const goToPage = (page) => {
  if (page < 1 || page > totalPages.value || page === currentPage.value) return
  currentPage.value = page
}

const triggerFileUpload = () => {
  fileInput.value.click()
}

const handleFileUpload = (event) => {
  const file = event.target.files[0]
  if (file && file.type === 'application/pdf') {
    console.log('已选择文件:', file.name)
  }
}

const selectTemplate = (index) => {
  selectedTemplate.value = index
  console.log('选中模板:', labels[index % labels.length])
  // 通知内置viewer启用“应用可视化”按钮
  if (viewerFrame.value && viewerFrame.value.contentWindow) {
    viewerFrame.value.contentWindow.postMessage({ type: 'set-apply-enabled', enabled: true }, '*')
  }
}

const selectPaper = async (paper) => {
  selectedPaperTitle.value = paper.title
  showPdfPreview.value = true
{{ ... }}
  pdfBlobUrl.value = ''
  isDownloading.value = true
  downloadProgress.value = 0
  try {
    const resp = await apiService.proxyPdf(paper.pdf_url, (e) => {
      if (e && e.total) {
        downloadProgress.value = Math.min(100, Math.round((e.loaded / e.total) * 100))
      }
    })
    // Axios 已返回 Blob
    const blob = resp
    // 创建blob URL
    pdfBlobUrl.value = URL.createObjectURL(blob)
  } catch (err) {
    console.error('PDF下载失败:', err)
  } finally {
    isDownloading.value = false
  }
}

const closePdfPreview = () => {
  showPdfPreview.value = false
  showVisualization.value = false
  // 释放blob URL
  if (pdfBlobUrl.value) {
    URL.revokeObjectURL(pdfBlobUrl.value)
    pdfBlobUrl.value = ''
  }
}

const applyVisualization = async () => {
  isProcessing.value = true
  
  // 模拟处理延迟
  await new Promise(resolve => setTimeout(resolve, 2000))
  
  // 这里将来会调用API生成可视化
  visualizationImage.value = '/assets/index_images/visualization_sample.png'
  showVisualization.value = true
  isProcessing.value = false
}

const closeAllPanels = () => {
  showNotificationPanel.value = false
  showUserPanel.value = false
}

onMounted(() => {
  loadThumbnails()
  const query = route.query.q || route.query.url
  if (query) {
    searchQuery.value = query
    handleSearch()
  }
})
</script>

<style scoped>
/* 预览容器内的加载样式 */
.pdf-loading {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}
.circle-wrapper {
  position: relative;
  width: 140px;
  height: 140px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.progress-ring {
  transform: rotate(-90deg);
}
.progress-ring__background,
.progress-ring__progress {
  transition: stroke-dashoffset 0.2s ease;
}
.progress-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -60%);
  font-size: 20px;
  font-weight: 600;
  color: #2c3e50;
}
.progress-subtext {
  position: absolute;
  top: calc(50% + 28px);
  left: 50%;
  transform: translateX(-50%);
  font-size: 12px;
  color: #7f8c8d;
}
.pdf-embed-container {
  max-width: 1100px;
  margin: 0 auto;
  padding: 16px;
  background: white;
  border-radius: 8px;
}

.pdf-document {
  width: 100%;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}
</style>
