# Generated by Django 4.2.7 on 2025-10-24 01:32

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ArxivFetchLog',
            fields=[
                ('id', models.AutoField(help_text='自增主键', primary_key=True, serialize=False, verbose_name='主键ID')),
                ('category', models.CharField(help_text='获取的arXiv分类，如cs.AI或cs.*', max_length=50, verbose_name='分类')),
                ('start_date', models.DateField(blank=True, help_text='查询的开始日期', null=True, verbose_name='开始日期')),
                ('end_date', models.DateField(blank=True, help_text='查询的结束日期', null=True, verbose_name='结束日期')),
                ('total_results', models.IntegerField(default=0, help_text='API返回的总结果数', verbose_name='总结果数')),
                ('fetched_count', models.IntegerField(default=0, help_text='实际获取并保存的论文数', verbose_name='实际获取数')),
                ('new_papers', models.IntegerField(default=0, help_text='新增的论文数（不包括更新）', verbose_name='新增论文数')),
                ('updated_papers', models.IntegerField(default=0, help_text='更新的论文数', verbose_name='更新论文数')),
                ('status', models.CharField(choices=[('running', '运行中'), ('completed', '完成'), ('failed', '失败')], default='running', max_length=20, verbose_name='状态')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='错误信息')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('duration_seconds', models.IntegerField(blank=True, null=True, verbose_name='耗时（秒）')),
            ],
            options={
                'verbose_name': 'ArXiv获取日志',
                'verbose_name_plural': 'ArXiv获取日志',
                'db_table': 'arxiv_fetch_log',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ArxivPaper',
            fields=[
                ('id', models.AutoField(help_text='自增主键', primary_key=True, serialize=False, verbose_name='主键ID')),
                ('arxiv_id', models.CharField(db_index=True, help_text='论文的arXiv标识符，如2301.12345', max_length=50, unique=True, verbose_name='arXiv ID')),
                ('version', models.IntegerField(default=1, help_text='论文版本号', verbose_name='版本号')),
                ('title', models.TextField(help_text='论文标题', verbose_name='标题')),
                ('summary', models.TextField(help_text='论文摘要/简介', verbose_name='摘要')),
                ('authors', models.JSONField(help_text='作者姓名和机构信息的JSON列表，格式: [{"name": "作者名", "affiliation": "机构"}]', verbose_name='作者列表')),
                ('primary_category', models.CharField(db_index=True, help_text='论文的主要arXiv分类，如cs.AI', max_length=50, verbose_name='主要分类')),
                ('categories', models.JSONField(help_text='论文的所有分类列表', verbose_name='所有分类')),
                ('arxiv_url', models.URLField(help_text='论文的arXiv页面URL', max_length=500, verbose_name='arXiv链接')),
                ('pdf_url', models.URLField(help_text='论文PDF的下载URL', max_length=500, verbose_name='PDF链接')),
                ('doi', models.CharField(blank=True, help_text='论文的DOI标识符', max_length=200, null=True, verbose_name='DOI')),
                ('doi_url', models.URLField(blank=True, help_text='DOI解析后的URL', max_length=500, null=True, verbose_name='DOI链接')),
                ('published', models.DateTimeField(db_index=True, help_text='论文v1版本的提交时间', verbose_name='首次发布时间')),
                ('updated', models.DateTimeField(db_index=True, help_text='当前版本的提交时间', verbose_name='更新时间')),
                ('comment', models.TextField(blank=True, help_text='作者添加的评论信息', null=True, verbose_name='作者评论')),
                ('journal_ref', models.CharField(blank=True, help_text='论文的期刊引用信息', max_length=500, null=True, verbose_name='期刊引用')),
                ('fetched_at', models.DateTimeField(default=django.utils.timezone.now, help_text='从API获取数据的时间', verbose_name='获取时间')),
                ('is_processed', models.BooleanField(db_index=True, default=False, help_text='是否已进行后续处理（如AI摘要生成）', verbose_name='是否已处理')),
                ('processing_status', models.CharField(choices=[('pending', '待处理'), ('processing', '处理中'), ('completed', '已完成'), ('failed', '失败')], default='pending', max_length=20, verbose_name='处理状态')),
                ('processing_error', models.TextField(blank=True, null=True, verbose_name='处理错误信息')),
            ],
            options={
                'verbose_name': 'ArXiv论文',
                'verbose_name_plural': 'ArXiv论文',
                'db_table': 'arxiv_paper',
                'ordering': ['-published'],
            },
        ),
        migrations.CreateModel(
            name='ArxivReferenceExtractLog',
            fields=[
                ('id', models.AutoField(help_text='自增主键', primary_key=True, serialize=False, verbose_name='主键ID')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('downloading', '下载中'), ('extracting', '提取中'), ('processing', 'LLM处理中'), ('completed', '已完成'), ('failed', '失败'), ('skipped', '跳过')], db_index=True, default='pending', max_length=20, verbose_name='状态')),
                ('reference_count', models.IntegerField(default=0, help_text='成功提取的参考文献数量', verbose_name='参考文献数量')),
                ('pdf_downloaded', models.BooleanField(default=False, help_text='是否成功下载PDF', verbose_name='PDF已下载')),
                ('pdf_file_path', models.CharField(blank=True, help_text='下载的PDF文件路径', max_length=500, null=True, verbose_name='PDF文件路径')),
                ('pdf_file_size', models.IntegerField(blank=True, help_text='PDF文件大小（字节）', null=True, verbose_name='PDF文件大小')),
                ('text_extracted', models.BooleanField(default=False, help_text='是否成功从PDF提取文本', verbose_name='文本已提取')),
                ('reference_section_found', models.BooleanField(default=False, help_text='是否找到参考文献部分', verbose_name='找到参考文献部分')),
                ('reference_raw_text', models.TextField(blank=True, help_text='从PDF中提取的参考文献部分的原始文本', null=True, verbose_name='参考文献原始文本')),
                ('reference_text_length', models.IntegerField(blank=True, help_text='参考文献原始文本的字符数', null=True, verbose_name='参考文献文本长度')),
                ('llm_processed', models.BooleanField(default=False, help_text='是否成功通过LLM处理', verbose_name='LLM已处理')),
                ('error_message', models.TextField(blank=True, help_text='处理失败时的错误信息', null=True, verbose_name='错误信息')),
                ('error_type', models.CharField(blank=True, help_text='错误类型（如download_error、extraction_error、llm_error等）', max_length=50, null=True, verbose_name='错误类型')),
                ('processing_details', models.JSONField(blank=True, help_text='处理过程中的详细信息（JSON格式）', null=True, verbose_name='处理详情')),
                ('llm_response', models.TextField(blank=True, help_text='LLM返回的原始响应内容（用于调试）', null=True, verbose_name='LLM原始响应')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('duration_seconds', models.IntegerField(blank=True, help_text='处理耗时', null=True, verbose_name='耗时（秒）')),
                ('retry_count', models.IntegerField(default=0, help_text='处理失败后的重试次数', verbose_name='重试次数')),
                ('paper', models.ForeignKey(help_text='处理的论文', on_delete=django.db.models.deletion.CASCADE, related_name='extract_logs', to='core.arxivpaper', verbose_name='论文')),
            ],
            options={
                'verbose_name': 'ArXiv参考文献提取日志',
                'verbose_name_plural': 'ArXiv参考文献提取日志',
                'db_table': 'arxiv_reference_extract_log',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ArxivPaperReference',
            fields=[
                ('id', models.AutoField(help_text='自增主键', primary_key=True, serialize=False, verbose_name='主键ID')),
                ('reference_number', models.IntegerField(db_index=True, help_text='参考文献在原文中的序号', verbose_name='序号')),
                ('title', models.TextField(blank=True, help_text='参考文献的标题', null=True, verbose_name='标题')),
                ('authors', models.JSONField(blank=True, help_text='作者姓名列表，格式: ["Author1", "Author2", ...]', null=True, verbose_name='作者列表')),
                ('year', models.IntegerField(blank=True, db_index=True, help_text='参考文献的发表年份', null=True, verbose_name='发表年份')),
                ('venue', models.CharField(blank=True, help_text='期刊、会议或其他出版场所', max_length=500, null=True, verbose_name='发表场所')),
                ('venue_type', models.CharField(blank=True, choices=[('journal', '期刊'), ('conference', '会议'), ('arxiv', 'arXiv预印本'), ('book', '书籍'), ('thesis', '学位论文'), ('tech_report', '技术报告'), ('other', '其他')], help_text='发表场所的类型', max_length=20, null=True, verbose_name='场所类型')),
                ('volume', models.CharField(blank=True, help_text='期刊或会议的卷号', max_length=50, null=True, verbose_name='卷号')),
                ('issue', models.CharField(blank=True, help_text='期刊的期号', max_length=50, null=True, verbose_name='期号')),
                ('pages', models.CharField(blank=True, help_text='参考文献的页码范围', max_length=50, null=True, verbose_name='页码')),
                ('doi', models.CharField(blank=True, db_index=True, help_text='参考文献的DOI标识符', max_length=200, null=True, verbose_name='DOI')),
                ('arxiv_id', models.CharField(blank=True, db_index=True, help_text='如果是arXiv论文，其arXiv标识符', max_length=50, null=True, verbose_name='arXiv ID')),
                ('url', models.URLField(blank=True, help_text='参考文献的在线链接', max_length=500, null=True, verbose_name='URL')),
                ('raw_text', models.TextField(help_text='参考文献的原始文本（从PDF提取）', verbose_name='原始文本')),
                ('extracted_at', models.DateTimeField(default=django.utils.timezone.now, help_text='从PDF提取的时间', verbose_name='提取时间')),
                ('extraction_method', models.CharField(default='llm', help_text='提取方法（如llm、regex等）', max_length=50, verbose_name='提取方法')),
                ('confidence_score', models.FloatField(blank=True, help_text='提取结果的置信度分数（0-1）', null=True, verbose_name='置信度')),
                ('paper', models.ForeignKey(help_text='该参考文献所属的论文', on_delete=django.db.models.deletion.CASCADE, related_name='references', to='core.arxivpaper', verbose_name='所属论文')),
            ],
            options={
                'verbose_name': 'ArXiv论文参考文献',
                'verbose_name_plural': 'ArXiv论文参考文献',
                'db_table': 'arxiv_paper_reference',
                'ordering': ['paper', 'reference_number'],
            },
        ),
        migrations.AddIndex(
            model_name='arxivpaper',
            index=models.Index(fields=['-published'], name='arxiv_paper_publish_6d3dda_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivpaper',
            index=models.Index(fields=['primary_category', '-published'], name='arxiv_paper_primary_844a61_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivpaper',
            index=models.Index(fields=['is_processed', 'processing_status'], name='arxiv_paper_is_proc_86bde4_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivreferenceextractlog',
            index=models.Index(fields=['paper', '-started_at'], name='arxiv_refer_paper_i_5490d3_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivreferenceextractlog',
            index=models.Index(fields=['status'], name='arxiv_refer_status_6f6e58_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivreferenceextractlog',
            index=models.Index(fields=['-started_at'], name='arxiv_refer_started_d536bb_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivpaperreference',
            index=models.Index(fields=['paper', 'reference_number'], name='arxiv_paper_paper_i_c234b3_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivpaperreference',
            index=models.Index(fields=['year'], name='arxiv_paper_year_581790_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivpaperreference',
            index=models.Index(fields=['doi'], name='arxiv_paper_doi_c8b883_idx'),
        ),
        migrations.AddIndex(
            model_name='arxivpaperreference',
            index=models.Index(fields=['arxiv_id'], name='arxiv_paper_arxiv_i_bbf378_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='arxivpaperreference',
            unique_together={('paper', 'reference_number')},
        ),
    ]
